/**
 * Author: Savi Mohan
 * UPI: smoh944
 */
package SFTPClient;
import java.io.*; 
import java.net.*;
import java.nio.charset.StandardCharsets; 
public class Client {
	private BufferedReader inFromServer;
	private DataOutputStream outToServer;
	private String currentDirectory = "src/SFTPClient/public";
	private String mappingType = "B";
	private Socket localConnectionSocket;
	
	Client(Socket connectionSocket) throws IOException{
		this.localConnectionSocket = connectionSocket;
		this.outToServer = new DataOutputStream(connectionSocket.getOutputStream());         
        this.inFromServer = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream())); 
        
        String messagetoServer; 
        String messageFromServer; 
	
        BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));       
        
        System.out.println(this.receiveMessageFromServer());
        try {
        	while(true) {
            	
            	messagetoServer = inFromUser.readLine()+"         ";   
            	
            	String command = messagetoServer.substring(0, 4).toUpperCase();
    			switch(command) {
    			
    			case "RETR":
    				this.cmdRETR(messagetoServer);
    				break;
    			case "STOR":
    				this.cmdSTOR(messagetoServer);
    				break;
    			case "DONE":
    				this.cmdDONE(messagetoServer);
    				break;
    			case "TYPE":
    				this.cmdTYPE(messagetoServer);
    				break;	
    			default:
    				this.sendMessageToServer(messagetoServer); 
    				messageFromServer = this.receiveMessageFromServer();
    	                
    				System.out.println("FROM SERVER: " + messageFromServer); 
    			} 
            	            
                
               
                
                //clientSocket.close();//////////////// 
            }
        }catch (SocketException s) {
        	this.localConnectionSocket.close();
        	System.out.println("Connection closed with Server");
        } catch (IOException e) {
        	System.out.println("IOException: connection now closed with Server");
        }
        
	}
	
	private void cmdRETR(String messagetoServer) throws IOException {
		this.sendMessageToServer(messagetoServer); 
		String fileName = (messagetoServer+"      ").substring(5).trim();//
		String messageFromServer = this.receiveMessageFromServer();
		long fileSize = 0;
		try { 
			fileSize = Long.parseLong(messageFromServer); 	
			System.out.println("FROM SERVER: " + messageFromServer);
	    } catch(NumberFormatException e) { 
	    	System.out.println("FROM SERVER: " + messageFromServer);
	    } catch(NullPointerException e) {
	    	System.out.println("FROM SERVER: " + messageFromServer);
	    }finally {
	    	File dir = new File(this.currentDirectory);
			long availableFolderSpace = dir.getUsableSpace();
			if (fileSize < availableFolderSpace) {
				System.out.println("TO CLIENT: SEND");
				this.sendMessageToServer("SEND"); 
				this.receiveFileFromServer(fileName, fileSize, "NEW");
				System.out.println("FILE RECEIVED");
			} else {
				System.out.println("TO CLIENT: STOP");
				this.sendMessageToServer("STOP"); 
				messageFromServer = this.receiveMessageFromServer();
				System.out.println("FROM SERVER: " + messageFromServer);
			}
	    }
	}
	
	private void cmdSTOR(String messagetoServer) throws IOException {
		
		String fileName = (messagetoServer+"          ").substring(9).trim();//
		String filePath = this.currentDirectory + "/" + fileName;
		System.out.println(messagetoServer);////
		File f = new File(filePath);
		if(f.exists()&&f.isFile()) {
			this.sendMessageToServer(messagetoServer); 
			String messageFromServer = this.receiveMessageFromServer();
			System.out.println("FROM SERVER: " + messageFromServer);
			if(messageFromServer.substring(0,1).equals("-")) {
				return;
			}
			System.out.println("TO SERVER:SIZE "+ Long.toString(f.length()));
			
			this.sendMessageToServer("SIZE "+ Long.toString(f.length()));
			messageFromServer = this.receiveMessageFromServer();
			System.out.println("FROM SERVER: " + messageFromServer);
			if(messageFromServer.substring(0,1).equals("-")) {
				return;
			}
			System.out.println("Sending File");
			this.sendFileToServer(f);
			messageFromServer = this.receiveMessageFromServer();
			System.out.println("FROM SERVER: " + messageFromServer);
			
		} else {
			System.out.println("No such file exists in client's directory");
		}
	}
	
	private void cmdDONE(String messagetoServer) throws IOException {
		this.sendMessageToServer(messagetoServer); 
		String messageFromServer = this.receiveMessageFromServer();
		System.out.println("FROM SERVER: " + messageFromServer); 
		if(messageFromServer.equals("+localhost connection closing")) {
			this.localConnectionSocket.close();
		}
		
	}
	
	private void cmdTYPE(String messagetoServer) throws IOException {
		String type = (messagetoServer+"      ").substring(5).trim().toUpperCase();//
		if (type.equals("A")) {			
			this.mappingType = "A";
		} else if (type.equals("B")) {			
			this.mappingType = "B";
		} else if (type.equals("C")) {			
			this.mappingType = "C";
		} 
		this.sendMessageToServer(messagetoServer); 
		String messageFromServer = this.receiveMessageFromServer();
		System.out.println("FROM SERVER: " + messageFromServer); 
	}
	
	private void sendMessageToServer(String message) throws IOException {		
		this.outToServer.writeBytes(message.trim()+'\0');		 
	}
	
	private String receiveMessageFromServer() throws IOException {
		char c = 'a';
        String message = ""; 
        while(c != '\0') {
        	c = (char) this.inFromServer.read();
			if (c != '\0') {
        		message += c;
        	}
        	
        }
        return message;
	}
	
	private void sendFileToServer(File fileToSend) throws IOException {
		InputStream in;		
		if (mappingType.equals("A")) {
			String fileLines = "";
			String fileLine = "";
			FileReader fr = new FileReader(fileToSend);
	        BufferedReader br = new BufferedReader(fr);
	        while ((fileLine = br.readLine()) != null) {	           
	            fileLines += (fileLine + "\r\n");	            
	        }
	        fr.close();
	        br.close();			
			
			in = new ByteArrayInputStream(fileLines.getBytes(StandardCharsets.US_ASCII));
		} else {
			in = new FileInputStream(fileToSend);			
		}
		int count;		
		byte[] buffer = new byte[1];		
		while ((count = in.read(buffer)) > -1)
		{
			this.outToServer.write(buffer, 0, count);			
		}		
		in.close();
		
	}
	
	private void receiveFileFromServer(String fName, long fileSize, String writeMode) throws IOException {
		boolean fileAPP = false;
		String fileName = fName;
		String filePath = this.currentDirectory + "/" + fileName;
		if (writeMode.equals("APP")){
			fileAPP = true;
		} else if (writeMode.equals("NEW")) {
			File f = new File(filePath);
			
			while(f.exists()&&f.isFile()) {
				fileName += "1";
				filePath = this.currentDirectory + "/" + fileName;
				f = new File(filePath);
			}
		}
		
		
		BufferedWriter out = new BufferedWriter(new FileWriter(filePath,fileAPP));
			
			char c = (char)this.inFromServer.read();
			
			long count=0;
			String line = "";
			if (this.mappingType.equals("A")) {				
				while(count < fileSize) {
					count++;
					if (c == '\r') {
						c = (char)this.inFromServer.read();
						out.write(line);
						out.newLine();
						out.flush();
						line = "";
					} else {
						line += c;
						c = (char)this.inFromServer.read();
					}					
				}	
				out.flush();
			} else {
				while(count < fileSize) {
					count++;
					out.write(c);
					c = (char)this.inFromServer.read();
					
					//FileWriter buffer is 1024 bytes in size, and char can be up to 2 bytes in size, so best to flush every time count reaches 512
					if(count == 512) {
						out.flush();
					}						
				}	
				out.flush();				
			}			
		out.close(); 	
	}
	
	public static void main(String argv[]) throws Exception 
    { 
		Socket clientSocket = new Socket("localhost", 6789); 
		Client client = new Client(clientSocket);
		
        
	
    } 

}
