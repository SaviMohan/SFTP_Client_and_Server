/**
 * Author: Savi Mohan
 * UPI: smoh944
 */
package SFTPServer;
import java.io.*; 
import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;

public class Server {
	private static final String userFile = "src/SFTPServer/userdata.txt";
	private static List<List<String>> userList;
	private static List<String> userNames;
	private boolean clientLoggedIn = false;
	private boolean clientAccountValidated = false;
	private boolean clientPasswordValidated = false;
	private String mappingType = "B";
	private List<String> currentUser;
	private BufferedReader inFromClient;
	private DataOutputStream  outToClient;
	private String currentDirectory = "src/SFTPServer/public";
	private boolean minusSent = false;
	private boolean cdirActive = false;
	private Socket localConnectionSocket;
	
	Server(Socket connectionSocket) throws IOException{
		this.currentUser = Arrays.asList("", "", "");
		this.localConnectionSocket = connectionSocket;
		this.inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream())); 
		this.outToClient = new DataOutputStream(connectionSocket.getOutputStream()); 
		this.sendMessageToClient("+localhost SFTP Service");
		this.getUserData();
		try {
			this.processMessages();
		} catch(IOException e) {
			System.out.println("Connection ended");
			this.localConnectionSocket.close();
		}
		
	}
	
	private void getUserData() throws IOException {
		userList = new ArrayList<List<String>>();
		userNames = new ArrayList<String>();
		// open the user data file
		FileInputStream fstream = new FileInputStream(userFile);
		
		BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
		String userLine;
		
		userLine = br.readLine();
		//read each line of user data file
		while ((userLine = br.readLine()) != null)   {
			List<String> userDetails = Arrays.asList(userLine.split(",",-1));
			userList.add(userDetails);			
			userNames.add(userDetails.get(0));
		}

		//close the input buffer stream
		br.close();
		fstream.close();
		System.out.println(userList);
	}
	
	private void sendMessageToClient(String message) {
		try {
			if(message.substring(0,1).equals("-")) {
				this.minusSent = true;
			}
			if (this.cdirActive && message.substring(0,1).equals("!")) {
				//don't send anything
			} else {
				this.outToClient.writeBytes(message+'\0');
			}
			
		} catch (IOException e) {
			System.out.println("Error sending message");
		}		
	}
	
	private String receiveMessageFromClient() throws IOException {
		char c = 'a';
        String message = ""; 
        while(c != '\0') {        	
			c = (char) this.inFromClient.read();
			
        	if (c != '\0') {
        		message += c;
        	}
        	
        }
        return message;
	}
	
	private void sendFileToClient(File fileToSend) throws IOException {
		InputStream in;
		if (mappingType.equals("A")) {
			String fileLines = "";
			String fileLine = "";
			FileReader fr = new FileReader(fileToSend);
	        BufferedReader br = new BufferedReader(fr);
	        while ((fileLine = br.readLine()) != null) {	           
	            fileLines += (fileLine + "\r\n");
	        }
	        fr.close();
	        br.close();
			
			
			in = new ByteArrayInputStream(fileLines.getBytes(StandardCharsets.US_ASCII));
		} else {
			in = new FileInputStream(fileToSend);			
		}
		int count;
		byte[] buffer = new byte[8192]; 
		while ((count = in.read(buffer)) > 0)
		{
			this.outToClient.write(buffer, 0, count);
		}
		in.close();
		
	}
	
	private void receiveFileFromClient(String fName, long fileSize, String writeMode) throws IOException {
		boolean fileAPP = false;
		String fileName = fName;
		String filePath = this.currentDirectory + "/" + fileName;
		System.out.println("test1");
		if (writeMode.equals("APP")){
			fileAPP = true;
		} else if (writeMode.equals("NEW")) {
			File f = new File(filePath);
			System.out.println("test2");
			while(f.exists()&&f.isFile()) {
				fileName = "n_" + fileName;
				filePath = this.currentDirectory + "/" + fileName;
				f = new File(filePath);
				System.out.println("test3");
			}
		}		
		
		BufferedWriter out = null;	
		try {
			System.out.println("test4");
			out = new BufferedWriter(new FileWriter(filePath,fileAPP));		
			char c = (char)this.inFromClient.read();			
			long count=0;
			String line = "";
			if (this.mappingType.equals("A")) {				
				while(count < fileSize) {
					count++;
					if (c == '\r') {
						c = (char)this.inFromClient.read();
						out.write(line);
						out.newLine();
						out.flush();
						line = "";
					} else {
						line += c;
						c = (char)this.inFromClient.read();
					}					
				}	
				out.flush();
			} else {
				System.out.println("test5");
				System.out.println(fileSize);
				int bufSize = 0;
				while(count < fileSize) {
					bufSize++;
					count++;
					out.write(c);					
					System.out.println("test55");
					c = (char)this.inFromClient.read();
					System.out.println(count);
					//FileWriter buffer is 1024 bytes in size, and char can be up to 2 bytes in size, so best to flush every time count reaches 512
					if(bufSize == 512) {
						System.out.println("test6");
						out.flush();
						bufSize = 0;
					}						
				}
				System.out.println("test7");
				out.flush();			
			}	
		}catch (IOException e){
			out.close();
			this.sendMessageToClient("-Couldn’t save because " + e.getMessage());
			return;
		}
		out.close();
		this.sendMessageToClient("+Saved "+ fileName);
	}
	
	private void processMessages() throws IOException{
		String receivedClientMessage; 
		String messageToClient; 
		
		while(true) { 
		    
	        //Socket connectionSocket = welcomeSocket.accept(); 
		    
		    //BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream())); 
		    
		    //DataOutputStream  outToClient = new DataOutputStream(connectionSocket.getOutputStream()); 
		    
		    receivedClientMessage = this.receiveMessageFromClient();
		    System.out.println("FROM CLIENT: " + receivedClientMessage); 
		    
		    //messageToClient = receivedClientMessage.toUpperCase() + '\n'; 
		    //try {
		    	this.processIncomingMessage(receivedClientMessage);
		    //}catch (IOException e) {
		    	//tcpServer.sendMessageToClient("-Error processing your message");
		    //}		    
		    
		    //tcpServer.outToClient.writeBytes(messageToClient); 
		    ////this.sendMessageToClient(messageToClient);
		    
		    //close socket????
	    } 
	}
	
	private void processIncomingMessage(String messageFromClient) throws IOException {
		if(messageFromClient.length() > 3) {
			String command = messageFromClient.substring(0, 4).toUpperCase();
			switch(command) {
			case "USER":
				this.cmdUSER(messageFromClient);
				break;
			case "ACCT":
				this.cmdACCT(messageFromClient);
				break;
			case "PASS":
				this.cmdPASS(messageFromClient);
				break;
			case "TYPE":
				this.cmdTYPE(messageFromClient);
				break;
			case "LIST":
				this.cmdLIST(messageFromClient);
				break;
			case "CDIR":
				this.cmdCDIR(messageFromClient);
				break;
			case "KILL":
				this.cmdKILL(messageFromClient);
				break;
			case "NAME":
				this.cmdNAME(messageFromClient);
				break;
			case "DONE":
				this.cmdDONE(messageFromClient);
				break;
			case "RETR":
				this.cmdRETR(messageFromClient);
				break;
			case "STOR":
				this.cmdSTOR(messageFromClient);
				break;
			default:
				this.sendMessageToClient("- Error: command not recognized");				
			}
		} else {
			this.sendMessageToClient("- Error: command not recognized");
		}
		//this.sendMessageToClient("- Error: An error occurred while processing your command.");		
	}
	
	private void cmdUSER(String messageFromClient) {
		String userid = messageFromClient.substring(5).trim();//need to account for strings of length 4
		System.out.println(userid);
		for (List<String> user : userList) {
			System.out.println(user.get(0));
			if (user.get(0).trim().equals(userid)) {		    	
		    	if (user.get(1).equals("") && user.get(2).equals("")) {
		    		this.sendMessageToClient("!"+userid+" logged in");
		    		this.clientLoggedIn =true;		    			    		
		    	} else {
		    		this.sendMessageToClient("+User-id valid, send account and/or password");		    		
		    	}
		    	this.currentUser= user;
		    	return;
		    }
		}
		this.sendMessageToClient("-Invalid user-id, try again");		
	}
	
	private void cmdACCT(String messageFromClient) {
		String account = messageFromClient.substring(5).trim();//
		if (!this.currentUser.get(0).equals("")) {
			if(this.currentUser.get(1).equals("") && this.currentUser.get(2).equals("")) {
				this.sendMessageToClient("!Account valid, logged-in");
				this.clientLoggedIn= true;	
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;				
			} else if (this.currentUser.get(1).equals("") && !this.currentUser.get(2).equals("")) {
				if (this.clientPasswordValidated) {
					this.sendMessageToClient("!Account valid, logged-in");
					this.clientLoggedIn =true;
				} else {
					this.sendMessageToClient("+Account valid, send password");
				}				
				this.clientAccountValidated = true;
			} else if (this.currentUser.get(1).equals(account) && this.currentUser.get(2).equals("")) {
				this.sendMessageToClient("!Account valid, logged-in");
				this.clientLoggedIn =true;
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;	
			} else if (this.currentUser.get(1).equals(account) && !this.currentUser.get(2).equals("")) {
				if (this.clientPasswordValidated) {
					this.sendMessageToClient("!Account valid, logged-in");
					this.clientLoggedIn =true;
				} else {
					this.sendMessageToClient("+Account valid, send password");
				}				
				this.clientAccountValidated = true;
			} else {
				this.sendMessageToClient("-Invalid account, try again");
				//this.clientAccountValidated = false;
			}			
		} else {
			this.sendMessageToClient("-Please enter userID first");
		}
	}
	
	private void cmdPASS(String messageFromClient) {
		String password = messageFromClient.substring(5).trim();//
		if (!this.currentUser.get(0).equals("")) {
			if(this.currentUser.get(1).equals("") && this.currentUser.get(2).equals("")) {
				this.sendMessageToClient("!Password valid, logged-in");
				this.clientLoggedIn= true;	
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;				
			} else if (this.currentUser.get(2).equals("") && !this.currentUser.get(1).equals("")) {
				if (this.clientAccountValidated) {
					this.sendMessageToClient("!Password valid, logged-in");
					this.clientLoggedIn =true;
				} else {
					this.sendMessageToClient("+Password valid, send account");
				}				
				this.clientPasswordValidated = true;
			} else if (this.currentUser.get(2).equals(password) && this.currentUser.get(1).equals("")) {
				this.sendMessageToClient("!Password valid, logged-in");
				this.clientLoggedIn =true;
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;	
			} else if (this.currentUser.get(2).equals(password) && !this.currentUser.get(1).equals("")) {
				if (this.clientAccountValidated) {
					this.sendMessageToClient("!Password valid, logged-in");
					this.clientLoggedIn =true;
				} else {
					this.sendMessageToClient("+Password valid, send account");
				}				
				this.clientPasswordValidated = true;
			} else {
				this.sendMessageToClient("-Wrong password, try again");
				//this.clientPasswordValidated = false;
			}			
		} else {
			this.sendMessageToClient("-Please enter userID first");
		}
	}
	
	private void cmdTYPE(String messageFromClient) {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		//message + "      ".trim()
		String type = messageFromClient.substring(5).trim().toUpperCase();//
		if (type.equals("A")) {
			this.sendMessageToClient("+Using Ascii mode");
			this.mappingType = "A";
		} else if (type.equals("B")) {
			this.sendMessageToClient("+Using Binary mode");
			this.mappingType = "B";
		} else if (type.equals("C")) {
			this.sendMessageToClient("+Using Continuous mode");
			this.mappingType = "C";
		} else {
			this.sendMessageToClient("-Type not valid");
		}
	}
	
	private void cmdLIST(String messageFromClient) throws IOException {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		String listType = messageFromClient.substring(5,6).trim().toUpperCase();//
		String directory = "";
		if (messageFromClient.length()>6) {
			directory = messageFromClient.substring(7).trim();//
			
			File f = new File(directory);
			if(!f.isDirectory()) {
				this.sendMessageToClient("-invalid file directory");
				return;
			}		
		} else {
			directory = this.currentDirectory;
		}
		
		File folder = new File(directory);
		File[] listOfFiles = folder.listFiles();
		
		String messageToSend = "+"+directory+"\r\n";
		if (listType.equals("F")) {
			for (int i = 0; i < listOfFiles.length; i++) {
				if (listOfFiles[i].isFile()) {
					messageToSend += listOfFiles[i].getName();
					messageToSend += "\r\n";					
				} 
			}
			this.sendMessageToClient(messageToSend);
		} else if (listType.equals("V")) {
			for (int i = 0; i < listOfFiles.length; i++) {
				if (listOfFiles[i].isFile()) {
					LocalDateTime date = LocalDateTime.ofInstant(
					        Instant.ofEpochMilli(listOfFiles[i].lastModified()), ZoneId.systemDefault()
					);					
					messageToSend += listOfFiles[i].getName() + "  ";
					messageToSend += "Size: " + Long.toString(listOfFiles[i].length()) + " bytes  ";
					messageToSend += "Last Modified: "+date+"  ";
					messageToSend += "\r\n";					
				} 
			}
			this.sendMessageToClient(messageToSend);
		} else {
			this.sendMessageToClient("-invalid parameters for LIST command");
		}
		
	}
	
	private void cmdCDIR(String messageFromClient) throws IOException {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		
		String directory = messageFromClient.substring(5).trim();//
		File f = new File(directory);
		if(!f.isDirectory()) {
			this.sendMessageToClient("-Can’t connect to directory because: invalid file directory");
			return;
		}		
		if((directory.contains(this.currentUser.get(0)))||(!userNames.parallelStream().anyMatch(directory::contains))) {
			this.currentDirectory = directory;
			this.sendMessageToClient("!Changed working dir to "+ directory);
		} else if (userNames.parallelStream().anyMatch(directory::contains)) {
			Optional<String> match = userNames.parallelStream().filter(directory::contains).findAny();
			List<String> currUser = this.currentUser;
			List<String> tempUser = null;
			for (List<String> user : userList) {
				if(user.get(0).trim().equals(match)) {
					tempUser = user;
					break;
				}
			}
			try {
				this.currentUser = tempUser;
				this.clientLoggedIn= false;	
				this.clientAccountValidated = false;
				this.clientPasswordValidated = false;
				
				this.sendMessageToClient("+directory ok, but need credentials to verify, send account/password");
				
				this.minusSent = false;
				while(true) {
					String receivedMessage = this.receiveMessageFromClient();
					this.cdirActive = true;
					if(receivedMessage.length() > 3) {
						String command = messageFromClient.substring(0, 4).toUpperCase();
						switch(command) {
						case "ACCT":
							this.cmdACCT(receivedMessage);
							break;
						case "PASS":
							this.cmdPASS(receivedMessage);
							break;
						default:
							this.sendMessageToClient("- Error: command not recognized");							
						}
					} else {
						this.sendMessageToClient("- Error: command not recognized");
						this.minusSent = false;
						this.cdirActive = false;
						break;
					}
					this.cdirActive = false;
					if(this.clientLoggedIn) {
						this.currentDirectory = directory;
						this.minusSent = false;
						this.sendMessageToClient("!Changed working dir to "+ directory);
						break;
					}
					if (this.minusSent) {
						this.minusSent = false;
						break;
					}
				}
				
			} catch (Exception e) {
				this.currentUser = currUser;
				this.clientLoggedIn= true;	
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;	
			} finally {
				this.currentUser = currUser;
				this.clientLoggedIn= true;	
				this.clientAccountValidated = true;
				this.clientPasswordValidated = true;
			}
		}	
		
	}
	
	private void cmdKILL(String messageFromClient) {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		
		String fileName = messageFromClient.substring(5).trim();//
		String filePath = this.currentDirectory + "/" + fileName;
		File f = new File(filePath);
		if(f.exists()&&f.isFile()) {
			f.delete();
			this.sendMessageToClient("+"+fileName+ " deleted");
		} else {
			this.sendMessageToClient("-Not deleted because specified file does not exist in directory");
		}
	}
	
	private void cmdNAME(String messageFromClient) throws IOException {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		String fileName = messageFromClient.substring(5).trim();//
		String filePath = this.currentDirectory + "/" + fileName;
		File f = new File(filePath);
		if(f.exists()&&f.isFile()) {
			this.sendMessageToClient("+File exists, send TOBE");
			
			
			String receivedMessage = this.receiveMessageFromClient();
			
			if(receivedMessage.length() > 3) {
				String command = messageFromClient.substring(0, 4).toUpperCase();
				if (command.equals("TOBE")) {					
					String newFileName = receivedMessage.substring(5).trim();//
					String newFilePath = this.currentDirectory + "/" + newFileName;
					File f1 = new File(newFilePath);
					if(f1.exists()) {
						if(f1.isDirectory()) {
							f.renameTo(f1);
							this.sendMessageToClient("+" + fileName + " renamed to " + newFileName);
						} else {
							this.sendMessageToClient("-File wasn’t renamed because new file name already exists in current directory");
						}
					} else {
						f.renameTo(f1);
						this.sendMessageToClient("+" + fileName + " renamed to " + newFileName);
					}
				} else {
					this.sendMessageToClient("- Error: invalid command, expected TOBE");	
				}
			} else {
				this.sendMessageToClient("- Error: invalid command, expected TOBE");				
			}			
		} else {
			this.sendMessageToClient("-Can’t find " + fileName + ", NAME command is aborted, don’t send TOBE.");
		}
	}
	
	private void cmdDONE(String messageFromClient) {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		
		this.sendMessageToClient("+localhost connection closing");
		try {
			this.localConnectionSocket.close();
		} catch (IOException e) {
			System.out.println("Connection closed");
		}
	}
	
	private void cmdRETR(String messageFromClient) throws IOException {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		String fileName = messageFromClient.substring(5).trim();//
		String filePath = this.currentDirectory + "/" + fileName;
		File f = new File(filePath);
		if(f.exists()&&f.isFile()) {
			this.sendMessageToClient(Long.toString(f.length()));
			
			String receivedMessage = this.receiveMessageFromClient();
			if(receivedMessage.length() > 3) {
				String command = receivedMessage.substring(0, 4).toUpperCase();
				switch(command) {
				case "SEND":
					//send file
					this.sendFileToClient(f);
					System.out.println("Sending file");
					break;
				case "STOP":
					this.sendMessageToClient("+ok, RETR aborted");
					break;
				default:
					this.sendMessageToClient("- Error: command not recognized, RETR aborted");				
				}
			} else {
				this.sendMessageToClient("- Error: command not recognized, RETR aborted");				
			}
			
		} else {
			this.sendMessageToClient("-Specified file does not exist in current directory, RETR aborted");
		}
	}
	
	private void cmdSTOR(String messageFromClient) throws IOException {
		if(!this.clientLoggedIn) {
			this.sendMessageToClient("-Please Login first");
			return;
		}
		String storeSpec = messageFromClient.substring(5,8).trim().toUpperCase();//
		String fileName = messageFromClient.substring(9).trim();//
		String filePath = this.currentDirectory + "/" + fileName;
		File f = new File(filePath);
		File dir = new File(this.currentDirectory);
		long availableFolderSpace = dir.getUsableSpace();
		if (storeSpec.equals("NEW")) {
			if(f.exists()&&f.isFile()) {
				this.sendMessageToClient("+File exists, will create new generation of file");
			} else {
				this.sendMessageToClient("+File does not exist, will create new file");
			}
		} else if (storeSpec.equals("OLD")) {
			if(f.exists()&&f.isFile()) {
				this.sendMessageToClient("+Will write over old file");
			} else {
				this.sendMessageToClient("+Will create new file");
			}
		} else if (storeSpec.equals("APP")) {
			if(f.exists()&&f.isFile()) {
				this.sendMessageToClient("+Will append to file");
			} else {
				this.sendMessageToClient("+Will create file");
			}
		} else {
			this.sendMessageToClient("-Invalid file parameters, STOR command sequence aborted");
			return;
		}
		String sizeMessage = this.receiveMessageFromClient();
		if (sizeMessage.substring(0,4).toUpperCase().equals("SIZE")) {
			long fileSize =  Long.parseLong(sizeMessage.substring(5).trim());
			if (fileSize < availableFolderSpace) {
				this.sendMessageToClient("+ok, waiting for file");
				this.receiveFileFromClient(fileName, fileSize, storeSpec);
			} else {
				this.sendMessageToClient("-Not enough room, don’t send it, STOR sequence aborted");
				return;
			}
		} else {
			this.sendMessageToClient("-Invalid command, expecting SIZE, STOR command sequence aborted");
			return;
		}
		
	}

	public static void main(String argv[]) throws Exception { 
	
	
	//tcpServer.getUserData();
	ServerSocket welcomeSocket = new ServerSocket(6789); 
	while(true) {
		
		Socket connectionSocket = welcomeSocket.accept();
		Server tcpServer = new Server(connectionSocket);
		////
		////
			
	}
	
    } 

}
